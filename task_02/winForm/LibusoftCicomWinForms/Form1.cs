using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using System.Xml.Linq;

namespace LibusoftCicomWinForms
{
    public partial class Form1 : Form
    {
        PartnerContext _context;
        private bool wasThereOIBError;

        public Form1()
        {
            InitializeComponent();
        }

        public static bool CheckOIB(string oib)
        {
            if (oib.Length != 11) return false;

            long b;
            if (!long.TryParse(oib, out b)) return false;

            int a = 10;
            for (int i = 0; i < 10; i++)
            {
                a = a + Convert.ToInt32(oib.Substring(i, 1));
                a = a % 10;
                if (a == 0) a = 10;
                a *= 2;
                a = a % 11;
            }
            int kontrolni = 11 - a;
            if (kontrolni == 10) kontrolni = 0;

            return kontrolni == Convert.ToInt32(oib.Substring(10, 1));
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            _context = new PartnerContext();

            // Call the Load method to get the data for the given DbSet 
            // from the database. 
            // The data is materialized as entities. The entities are managed by 
            // the DbContext instance. 
            _context.Partners.Load();

            // Bind the categoryBindingSource.DataSource to 
            // all the Unchanged, Modified and Added Category objects that 
            // are currently tracked by the DbContext.
            // Note that we need to call ToBindingList() on the 
            // ObservableCollection<TEntity> returned by
            // the DbSet.Local property to get the BindingList<T>
            // in order to facilitate two-way binding in WinForms.
            this.partnerBindingSource.DataSource =
                _context.Partners.Local.ToBindingList();
        }

        private void partnerBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();
            
            foreach (var partner in _context.Partners.Local.ToList())
            {
                if (!CheckOIB(partner.OIB.ToString()))
                {
                    MessageBox.Show("OIB Greška kod partnera: " + partner.Name.ToString());
                    this.wasThereOIBError = true;
                }
            }

            if (!wasThereOIBError)
            {
                // Save the changes to the database.
                this._context.SaveChanges();

                // Refresh the controls to show the values         
                // that were generated by the database.
                this.partnerDataGridView.Refresh();
            }
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            base.OnClosing(e);
            this._context.Dispose();
        }

        private void partnerBindingNavigatorSaveToXML_Click(object sender, EventArgs e)
        {
            var xDocument = new XDocument();
            var xPartners = new XElement("Partners");

            foreach (var partner in _context.Partners.Local.ToList())
            {
                var xPartner = new XElement("Partner",
                    new XElement("PartnerId", partner.PartnerId),
                    new XElement("Name", partner.Name),
                    new XElement("OIB", partner.OIB),
                    new XElement("Contact", partner.Contact),
                    new XElement("Description", partner.Description)
                    );
                xPartners.Add(xPartner);
            }

            xDocument.Add(xPartners);
            xDocument.Save("Partners.xml");
        }
    }
}
